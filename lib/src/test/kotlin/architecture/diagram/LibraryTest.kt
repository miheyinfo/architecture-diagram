/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package architecture.diagram

import com.structurizr.Workspace
import com.structurizr.export.IndentingWriter
import com.structurizr.model.InteractionStyle

import kotlin.test.Test
import kotlin.test.assertEquals

class LibraryTest {
    @Test fun `test name to camelcase`() {
        assertEquals("mySoftwareSystem", "My Software System".toCamelCase())
    }

    @Test fun `Person to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val person = workspace.model.addPerson("User")
        assertEquals(
            """
                user = person "User" {
                  description ""
                  tags "Element", "Person"
                }
            """.trimIndent(),
            person.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Person with attributes to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val person = workspace.model.addPerson("User")
        person.addTags("Tag1", "Tag2", "Tag3")
        person.addProperty("property1", "value1")
        person.addProperty("property2", "value2")
        person.url = "http://example.com"
        person.description = "This is a user"
        assertEquals(
            """
        user = person "User" {
          description "This is a user"
          url "http://example.com"
          tags "Element", "Person", "Tag1", "Tag2", "Tag3"
          properties {
            property1 "value1"
            property2 "value2"
          }
        }
        """.trimIndent(),
            person.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Software System to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        assertEquals(
            """
                softwareSystem = softwareSystem "Software System" {
                  description ""
                  tags "Element", "Software System"
                }
            """.trimIndent(),
            softwareSystem.toDslString(IndentingWriter()).toString()
        )
    }
    @Test fun `relationship user used software system`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val person = workspace.model.addPerson("User")
        person.uses(softwareSystem, "uses")
        assertEquals(
            """
                user -> softwareSystem "uses" {
                  tags "Relationship"
                }
            """.trimIndent(),
            workspace.model.relationships.first().toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Relationship to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val container1 = softwareSystem.addContainer("Container1", "Description", "Technology")
        val container2 = softwareSystem.addContainer("Container2", "Description", "Technology")
        val component1 = container1.addComponent("Component1", "Description", "Technology")
        val component2 = container2.addComponent("Component2", "Description", "Technology")
        val relationship = component1.uses(component2, "Uses", "HTTP", InteractionStyle.Synchronous, arrayOf("Tag1", "Tag2", "Tag3"))
        relationship?.addProperty("property1", "value1")
        relationship?.addProperty("property2", "value2")
        assertEquals(
            """
        component1 -> component2 "Uses" "HTTP" {
          tags "Relationship", "Synchronous", "Tag1", "Tag2", "Tag3"
          properties {
            property1 "value1"
            property2 "value2"
          }
        }
        """.trimIndent(),
            relationship?.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Container to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val container = softwareSystem.addContainer("Container", "Description", "Technology")
        assertEquals(
            "container = container \"Container\"",
            container.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Component to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val container = softwareSystem.addContainer("Container", "Description", "Technology")
        val component = container.addComponent("Component", "Description", "Technology")
        component.addTags("Tag1", "Tag2", "Tag3")
        component.addProperty("property1", "value1")
        component.addProperty("property2", "value2")
        assertEquals(
            """
        component = component "Component" {
          description "Description"
          technology "Technology"
          tags "Element", "Component", "Tag1", "Tag2", "Tag3"
          properties {
            property1 "value1"
            property2 "value2"
          }
        }
        """.trimIndent(),
            component.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Model to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val container = softwareSystem.addContainer("Container", "Description", "Technology")
        container.addComponent("Component", "Description", "Technology")
        val person = workspace.model.addPerson("User")
        person.uses(softwareSystem, "uses")
        assertEquals(
            """
                model {
                  user = person "User" {
                    description ""
                    tags "Element", "Person"
                  }
                  softwareSystem = softwareSystem "Software System" {
                    description ""
                    tags "Element", "Software System"
                    container = container "Container" {
                      component = component "Component" {
                        description "Description"
                        technology "Technology"
                        tags "Element", "Component"
                      }
                    }
                  }
                  user -> softwareSystem "uses" {
                    tags "Relationship"
                  }
                }
            """.trimIndent(),
            workspace.model.toDslString(IndentingWriter()).toString()
        )
    }

    @Test fun `Workspace to dsl string creates valid dsl`() {
        val workspace = Workspace("Workspace", "description")
        val softwareSystem = workspace.model.addSoftwareSystem("Software System")
        val container = softwareSystem.addContainer("Container", "Description", "Technology")
        container.addComponent("Component", "Description", "Technology")
        val person = workspace.model.addPerson("User")
        person.uses(softwareSystem, "uses")
        assertEquals(
            """
                workspace "Workspace" "description" {
                  model {
                    user = person "User" {
                      description ""
                      tags "Element", "Person"
                    }
                    softwareSystem = softwareSystem "Software System" {
                      description ""
                      tags "Element", "Software System"
                      container = container "Container" {
                        component = component "Component" {
                          description "Description"
                          technology "Technology"
                          tags "Element", "Component"
                        }
                      }
                    }
                    user -> softwareSystem "uses" {
                      tags "Relationship"
                    }
                  }
                }
            """.trimIndent(),
            workspace.toDslString(IndentingWriter()).toString()
        )
    }

}
